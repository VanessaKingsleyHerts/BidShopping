#.gitlab-ci.yml - for merge_incremental

stages:
  - build
  - lint
  - test
  - update_logs

variables:
  PYTHONDONTWRITEBYTECODE: "1"
  PYTHONUNBUFFERED:       "1"
  POSTGRES_DB:            "bidshopping"
  POSTGRES_USER:          "postgres"
  POSTGRES_PASSWORD:      "postgres"
  DATABASE_URL:           "postgres://postgres:postgres@db:5432/bidshopping"
  STATIC_ROOT:            "/tmp/static"
  DOCKER_TLS_CERTDIR:     ""

# ──────────────────────────────────────────────────────────────────────────────
build-image:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    - docker build -t "$CI_REGISTRY_IMAGE/bidshopping:dev" .
    - docker push "$CI_REGISTRY_IMAGE/bidshopping:dev"
  only:
    - main

image: "$CI_REGISTRY_IMAGE/bidshopping:dev"
services:
  - name: postgres:13
    alias: db

cache:
  paths:
    - .cache/pip

before_script:
  - mkdir -p "$STATIC_ROOT"
# ──────────────────────────────────────────────────────────────────────────────

lint:
  stage: lint
  script:
    - flake8 .

test:
  stage: test
  script:
    # 1) collectstatic & migrate — bail if these fail
    - python manage.py collectstatic --noinput
    - python manage.py migrate --noinput
    # 2) run unit tests (capture non‑zero but don't abort)
    - |
      python ci/ci_logger.py \
        "coverage run --source=. manage.py test --parallel --exclude-tag=functional" || \
      echo "unit‑tests failed (captured)"
    # 3) start server for functional tests
    - python manage.py runserver 0.0.0.0:8000 &
    - sleep 5
    # 4) run functional tests (also don't abort)
    - |
      python ci/ci_logger.py \
        "coverage run --append --source=. manage.py test --tag=functional" || \
      echo "functional‑tests failed (captured)"
    # 5) coverage report (don’t fail the job if coverage is low)
    - coverage report || true
  artifacts:
    when: always
    paths:
      - htmlcov/
      - functional_tests/screenshots/
      - logs/ci_logs.csv
    expire_in: 1 week

update_logs:
  stage: update_logs
  image: python:3.10
  needs: [test]
  before_script:
    - pip install pandas requests
  script:
    # 1) Copy this pipeline's log into data/raw/
    - mkdir -p data/raw
    - cp logs/ci_logs.csv data/raw/${CI_PIPELINE_ID}.csv
    # 2) Merge it into data/all_logs.csv
    - python scripts/merge_current.py
    # 3) Push back to GitHub via your existing push_to_github.py
    - echo ">>>> Pushing updated all_logs.csv to GitHub"
    - python scripts/push_to_github.py
  only:
    - main
