image: python:3.10

stages:
  - lint
  - test

variables:
  PYTHONDONTWRITEBYTECODE: "1"
  PYTHONUNBUFFERED: "1"
  POSTGRES_DB: "bidshopping"
  POSTGRES_USER: "postgres"
  POSTGRES_PASSWORD: ""
  DATABASE_URL: "postgres://postgres:@db:5432/bidshopping"
  STATIC_ROOT: "/tmp/static"
  SELENIUM_REMOTE_URL: "http://selenium:4444/wd/hub"

cache:
  paths:
    - .cache/pip

lint:
  stage: lint
  before_script:
    - python -m venv .venv
    - source .venv/bin/activate
    - pip install flake8
  script:
    - flake8 .

test:
  stage: test
  services:
    - name: postgres:13
      alias: db
    - name: selenium/standalone-chrome:latest
      alias: selenium

  before_script:
    # … your venv + pip installs …

    # 1) Install system deps
    - apt-get update && apt-get install -y wget unzip curl

    # 2) Install Chrome
    - wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | apt-key add -
    - echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" \
        > /etc/apt/sources.list.d/google-chrome.list
    - apt-get update && apt-get install -y google-chrome-stable

    # 3) Download the matching ChromeDriver
    - CHROME_MAJOR=$(google-chrome --version | cut -d' ' -f3 | cut -d. -f1)
    - DRIVER_VERSION=$(curl -sS https://chromedriver.storage.googleapis.com/LATEST_RELEASE_${CHROME_MAJOR})
    - wget -qO /tmp/chromedriver.zip \
        https://chromedriver.storage.googleapis.com/${DRIVER_VERSION}/chromedriver_linux64.zip
    - unzip /tmp/chromedriver.zip -d /usr/local/bin/
    - chmod +x /usr/local/bin/chromedriver

    # 4) Now install your Python deps
    - python -m venv .venv && source .venv/bin/activate
    - pip install --upgrade pip
    - pip install -r requirements.txt
    - pip install coverage selenium psycopg2-binary

  script:
    - mkdir -p "$STATIC_ROOT"
    - python manage.py collectstatic --noinput
    - python manage.py migrate --noinput

    # Split tests into parallel unit and serial functional
    - coverage run --source=. manage.py test --parallel --exclude-tag=functional
    - coverage run --append --source=. manage.py test --tag=functional

    - coverage xml -o coverage.xml
    - coverage html -d htmlcov

  artifacts:
    when: always
    reports:
      junit: report.xml
    paths:
      - htmlcov/
      - functional_tests/screenshots/
    expire_in: 1 week
