# ──────────────────────────────────────────────────────────────────────────────
# .gitlab-ci.yml — Restored main pipeline + Fast A/B experiments
# ──────────────────────────────────────────────────────────────────────────────

#################### 1. workflow: rules #######################################
workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $CI_SCHEDULE_NAME =~ /Baseline/i'
      variables:
        HEAL_MODE:   "baseline"
        INJECT_FAIL: "true"
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $CI_SCHEDULE_NAME =~ /ML/i'
      variables:
        HEAL_MODE:   "ml"
        INJECT_FAIL: "true"
    - when: always

#################### 2. Global defaults #######################################
stages:
  - build
  - lint
  - test
  - post_logs

variables:
  HEAL_MODE:      "ml"
  INJECT_FAIL:    "false"
  PIP_CACHE_DIR:  "$CI_PROJECT_DIR/.cache/pip"
  PYTHONDONTWRITEBYTECODE: "1"
  PYTHONUNBUFFERED:        "1"

# A global before_script that installs Python deps for EVERY job
.before_all: &before_all
  before_script:
    - mkdir -p logs
    - python3 -m pip install --upgrade pip
    - pip install --cache-dir "$PIP_CACHE_DIR" -r requirements.txt

cache:
  key: "$CI_COMMIT_REF_SLUG"
  paths:
    - .cache/pip/

#################### 3. FAST A/B EXPERIMENT JOBS (schedules) ##################
.experiment: &experiment
  <<: *before_all                      # install Python deps
  image: python:3.10-slim
  stage: build
  services:
    - docker:dind
  variables:
    DOCKER_HOST:       "tcp://docker:2375"
    DOCKER_TLS_CERTDIR: ""
    SKIP_TEST_STAGE:  "true"
  before_script:
    - *before_all                      # ensure Python deps
    - apt-get update && apt-get install -y docker.io
  script:
    - 'echo "=== EXPERIMENT MODE: $HEAL_MODE (inject=$INJECT_FAIL) ==="'
    # Fast Docker build (cache) + push
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    - docker pull "$CI_REGISTRY_IMAGE:cache" || true
    - docker build --cache-from "$CI_REGISTRY_IMAGE:cache" -t "$CI_REGISTRY_IMAGE:dev" .
    - docker tag "$CI_REGISTRY_IMAGE:dev" "$CI_REGISTRY_IMAGE:cache"
    - docker push "$CI_REGISTRY_IMAGE:cache"
    # Run lint under healing wrapper (failure injection)
    - python ci/predict_and_heal.py "flake8 ." --tag lint
  artifacts:
    when: always
    paths:
      - logs/ci_logs.csv
  only:
    - schedules

baseline_experiment:
  <<: *experiment
  # triggered when schedule name includes "Baseline"

ml_experiment:
  <<: *experiment
  # triggered when schedule name includes "ML"

#################### 4. FULL PIPELINE FOR MAIN PUSHES ########################
build-image:
  <<: *before_all                      # install Python deps
  stage: build
  image: python:3.10-slim
  services:
    - docker:dind
  variables:
    DOCKER_HOST:       "tcp://docker:2375"
    DOCKER_TLS_CERTDIR: ""
  before_script:
    - *before_all
    - apt-get update && apt-get install -y docker.io
  script:
    - python ci/predict_and_heal.py "docker login -u \"$CI_REGISTRY_USER\" -p \"$CI_REGISTRY_PASSWORD\" \"$CI_REGISTRY\"" --tag build --label docker-login
    - python ci/predict_and_heal.py "docker build -t \"$CI_REGISTRY_IMAGE/bidshopping:dev\" ." --tag build --label docker-build
    - python ci/predict_and_heal.py "docker push \"$CI_REGISTRY_IMAGE/bidshopping:dev\"" --tag build --label docker-push
  artifacts:
    when: always
    paths:
      - logs/ci_logs.csv
  only:
    - main

lint:
  <<: *before_all
  stage: lint
  image: "$CI_REGISTRY_IMAGE:dev"
  script:
    - python ci/predict_and_heal.py "flake8 ." --tag lint
  artifacts:
    when: always
    paths:
      - logs/ci_logs.csv
  only:
    - main

test:
  <<: *before_all
  stage: test
  image: "$CI_REGISTRY_IMAGE:dev"
  script:
    - python ci/predict_and_heal.py "python manage.py collectstatic --noinput" --tag test
    - python ci/predict_and_heal.py "python manage.py migrate --noinput" --tag test
    - python ci/predict_and_heal.py "coverage run --source=. manage.py test --parallel --exclude-tag=functional" --tag test
    - python manage.py runserver 0.0.0.0:8000 & sleep 5
    - python ci/predict_and_heal.py "coverage run --append --source=. manage.py test --tag=functional" --tag test
    - coverage report
  artifacts:
    when: always
    paths:
      - htmlcov/
      - functional_tests/screenshots/
      - logs/ci_logs.csv
  only:
    - main

#################### 5. LOG MERGE / PUSH BACK #################################
update-logs:
  <<: *before_all
  stage: post_logs
  image: python:3.10-slim
  needs:
    - build-image
    - lint
    - test
  when: always
  script:
    - mkdir -p data/raw
    - cp logs/ci_logs.csv data/raw/$CI_PIPELINE_ID.csv
    - python scripts/merge_incremental.py
    - python scripts/push_to_github.py
  only:
    - main

collect-logs:
  <<: *before_all
  stage: post_logs
  image: python:3.10-slim
  when: manual
  script:
    - python scripts/download_logs.py
    - python scripts/merge_full.py
    - python scripts/push_to_github.py
  only:
    - schedules
