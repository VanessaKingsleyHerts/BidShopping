# .gitlab-ci.yml â€” optimized for speed and caching

stages:
  - build
  - lint
  - test
  - post_logs

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
  CACHE_REGISTRY: registry.gitlab.com/uhthesis/bidshopping:ci-base
  BASE_IMAGE: $CACHE_REGISTRY

before_script:
  - echo "Starting $CI_JOB_STAGE job in $CI_PIPELINE_ID"

cache:
  key: "$CI_COMMIT_REF_SLUG"
  paths:
    - .pytest_cache/
    - .mypy_cache/

build-image:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  artifacts:
    paths:
      - logs/ci_logs.csv
    when: always
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker pull $CACHE_REGISTRY || true
    - python ci/ci_logger.py "docker build --cache-from $CACHE_REGISTRY -f Dockerfile.ci -t $BASE_IMAGE ." --tag build
    - docker push $BASE_IMAGE
  rules:
    - changes:
        - Dockerfile.ci
        - requirements-*.txt
        - ci/apt-packages.txt

ml_experiment:
  stage: build
  image: $BASE_IMAGE
  script:
    - echo "Running ML variant"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: always

baseline_experiment:
  stage: build
  image: $BASE_IMAGE
  script:
    - echo "Running baseline variant"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: always

lint:
  stage: lint
  image: $BASE_IMAGE
  script:
    - python ci/predict_and_heal.py "flake8 ." --tag lint
  artifacts:
    paths:
      - logs/ci_logs.csv
    when: always
  rules:
    - changes:
        - "**/*.py"
        - ".flake8"
      when: on_success
    - exists:
        - .flake8
      when: manual
    - changes:
        - "**/*.py"
        - ".flake8"
    - exists:
        - .flake8

unit_tests:
  stage: test
  image: $BASE_IMAGE
  script:
    - python ci/predict_and_heal.py "python manage.py test auction.tests" --tag test
  artifacts:
    paths:
      - logs/ci_logs.csv
    when: always
  rules:
    - changes:
        - "**/*.py"
      when: on_success
    - exists:
        - auction/tests/
      when: manual
    - changes:
        - auction/tests/**/*.py
        - auction/**/*.py
    - exists:
        - auction/tests/

functional_tests:
  stage: test
  image: $BASE_IMAGE
  services:
    - name: docker:dind
      alias: docker
  script:
    - python manage.py migrate
    - python ci/predict_and_heal.py "python manage.py test --tag=functional" --tag test
  artifacts:
    paths:
      - logs/ci_logs.csv
    when: always
  rules:
    - changes:
        - "**/*.py"
      when: on_success
    - exists:
        - functional_tests/
      when: manual
    - changes:
        - functional_tests/**/*.py
    - exists:
        - functional_tests/

update-logs:
  stage: post_logs
  image: $BASE_IMAGE
  script:
    - python scripts/merge_incremental.py
  needs:
    - job: build-image
      artifacts: true
    - job: unit_tests
      artifacts: true
    - job: lint
      artifacts: true
    - job: functional_tests
      artifacts: true
    - job: qa-all
      artifacts: true
  rules:
    - when: always
  allow_failure: true

collect-logs:
  stage: post_logs
  image: $BASE_IMAGE
  when: manual
  script:
    - python scripts/merge_full.py

qa-all:
  stage: test
  image: $BASE_IMAGE
  when: manual
  script:
    - python manage.py migrate
    - python ci/ci_logger.py "docker build --cache-from $CACHE_REGISTRY -f Dockerfile.ci -t $BASE_IMAGE ." --tag build
    - python ci/predict_and_heal.py "flake8 ." --tag lint
    - python ci/predict_and_heal.py "python manage.py test auction.tests" --tag test
    - python ci/predict_and_heal.py "python manage.py test --tag=functional" --tag test
  artifacts:
    paths:
      - logs/ci_logs.csv
    when: always
