variables:
  EXPERIMENT: "false"
  HEAL_MODE: "ml"
  INJECT_FAIL: "true"
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  PYTHONDONTWRITEBYTECODE: "1"
  PYTHONUNBUFFERED: "1"
  BASE_IMG: "registry.gitlab.com/uhthesis/bidshopping:ci-base"

#workflow:
  #rules:
    #- if: '$EXPERIMENT == "true"'
      #variables:
        #INJECT_FAIL: "false"
      #when: always
    #- when: never

stages:
  - setup
  - build
  - lint
  - test
  - experiment
  - log_collect
  - post_logs

show_env:
  stage: setup
  script:
    - 'echo "Triggered via: $CI_PIPELINE_SOURCE"'
    - 'echo "Schedule name: ${CI_SCHEDULE_NAME:-unset}"'
    - 'echo "Experiment type: ${EXPERIMENT:-unset}"'
    - 'echo "HEAL_MODE: ${HEAL_MODE:-unset}"'
    - 'echo "INJECT_FAIL: ${INJECT_FAIL:-unset}"'
  rules:
    - when: never


cache:
  key: "$CI_COMMIT_REF_SLUG"
  paths:
    - .cache/pip/

experiment:
  image: "$BASE_IMG"
  stage: experiment
  services:
    - docker:dind
  variables:
    DOCKER_HOST: "tcp://docker:2375"
    DOCKER_TLS_CERTDIR: ""
  before_script:
    - mkdir -p logs
    - test -f ci/__init__.py || (echo "ci module is not importable!" && exit 1)
  script:
    - 'echo "=== EXPERIMENT MODE: $HEAL_MODE (inject=$INJECT_FAIL) ==="'

    # Safer login
    - python ci/predict_and_heal.py "echo \"$CI_REGISTRY_PASSWORDD\" | docker login -u \"$CI_REGISTRY_USER\" --password-stdin \"$CI_REGISTRY\"" --tag build --label docker-login

    # Docker build pipeline simulating 'build' stage
    - python ci/predict_and_heal.py "docker build -f Dockerfile -t \"$CI_REGISTRY_IMAGE:dev\" ." --tag build --label docker-build
    - python ci/predict_and_heal.py "docker push \"$CI_REGISTRY_IMAGE:dev\"" --tag build --label docker-push

    # Lint and tests
    - python ci/predict_and_heal.py "flake8 ." --tag lint
    - python ci/predict_and_heal.py "python manage.py collectstatic --noinput" --tag test
    - python ci/predict_and_heal.py "python manage.py migrate --noinput" --tag test
    - python ci/predict_and_heal.py "coverage run --source=. manage.py test --parallel --exclude-tag=functional" --tag test
  artifacts:
    when: always
    paths:
      - logs/ci_logs.csv
  rules:
    - if: '$EXPERIMENT == "true"'
      when: always
    - when: never

build-image:
  image: "$BASE_IMG"
  stage: log_collect
  allow_failure: true
  services:
    - docker:dind
  variables:
    DOCKER_HOST: "tcp://docker:2375"
    DOCKER_TLS_CERTDIR: ""
  before_script:
    - mkdir -p logs
  script:
    - python ci/predict_and_heal.py "echo \"$CI_REGISTRY_PASSWORD\" | docker login -u \"$CI_REGISTRY_USER\" --password-stdin \"$CI_REGISTRY\"" --tag build --label docker-login
    - python ci/predict_and_heal.py "docker build -f Dockerfile -t \"$CI_REGISTRY_IMAGE:dev\" ." --tag build --label docker-build
    - python ci/predict_and_heal.py "docker push \"$CI_REGISTRY_IMAGE:dev\"" --tag build --label docker-push
  artifacts:
    when: always
    paths:
      - logs/ci_logs.csv
  rules:
    - when: never
    - if: '$EXPERIMENT == "true"'
      when: never
    - changes:
        - Dockerfile
        - requirements*.txt
        - ci/**
      when: on_success
    - exists:
        - ci/
      when: manual

lint:
  image: "$CI_REGISTRY_IMAGE:dev"
  stage: log_collect
  allow_failure: true
  script:
    - python ci/predict_and_heal.py "flake8 ." --tag lint
  artifacts:
    when: always
    paths:
      - logs/ci_logs.csv
  rules:
    - when: always
    - if: '$EXPERIMENT == "true"'
      when: never
    - changes:
        - "**/*.py"
        - .flake8
      when: on_success
    - exists:
        - .flake8
      when: manual

unit_tests:
  image: "$CI_REGISTRY_IMAGE:dev"
  stage: log_collect
  allow_failure: true
  script:
    - python ci/predict_and_heal.py "python manage.py collectstatic --noinput" --tag test
    - python ci/predict_and_heal.py "python manage.py migrate --noinput" --tag test
    - python ci/predict_and_heal.py "coverage run --source=. manage.py test --parallel --exclude-tag=functional" --tag test
  artifacts:
    when: always
    paths:
      - htmlcov/
      - logs/ci_logs.csv
  rules:
    - when: always
    - if: '$EXPERIMENT == "true"'
      when: never
    - changes:
        - "**/*.py"
        - manage.py
        - requirements*.txt
        - ci/**
      when: on_success
    - exists:
        - auction/tests/
      when: manual

functional_tests:
  image: "$CI_REGISTRY_IMAGE:dev"
  stage: log_collect
  allow_failure: true
  script:
    - python manage.py runserver 0.0.0.0:8000 & sleep 5
    - python ci/predict_and_heal.py "coverage run --append --source=. manage.py test --tag=functional" --tag test
    - coverage report
  artifacts:
    when: always
    paths:
      - functional_tests/screenshots/
      - logs/ci_logs.csv
  rules:
    - when: never
    - if: '$EXPERIMENT == "true"'
      when: never
    - changes:
        - auction/templates/**/*
        - auction/static/**/*
        - functional_tests/**/*
      when: on_success
    - exists:
        - functional_tests/
      when: manual

update-logs:
  image: "$BASE_IMG"
  stage: post_logs
  allow_failure: true
  needs:
    - job: build-image
      artifacts: true
      optional: true
    - job: lint
      artifacts: true
      optional: true
    - job: unit_tests
      artifacts: true
      optional: true
    - job: functional_tests
      artifacts: true
      optional: true
    - job: experiment
      artifacts: true
      optional: true
  script:
    - mkdir -p data/raw
    - |
      if [ ! -f logs/ci_logs.csv ]; then
        echo "⚠️ No logs/ci_logs.csv found — skipping logs update"
        exit 0
      fi
    - cp logs/ci_logs.csv data/raw/$CI_PIPELINE_ID.csv
    - python scripts/merge_incremental.py || echo "update logs failed"
    - python scripts/push_to_github.py || echo "push failed"
  rules:
    - when: never

collect-logs:
  image: "$BASE_IMG"
  stage: post_logs
  allow_failure: true
  before_script:
    - mkdir -p logs
  script:
    - python scripts/download_logs.py
    - python scripts/merge_full.py
    - python scripts/push_to_github.py
  rules:
    - when: never
    - if: '$EXPERIMENT == "true"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: always
    - when: never
