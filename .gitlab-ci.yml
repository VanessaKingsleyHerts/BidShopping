# ──────────────────────────────────────────────────────────────────────────────
# .gitlab-ci.yml — Hybrid with Fast A/B Schedules + Full Main Pipeline
# ──────────────────────────────────────────────────────────────────────────────

#################### 1. workflow: rules  #######################################
# Sets variables automatically per‑schedule name so you DON'T need
# UI variables or multiple branches
workflow:
  rules:
    # If triggered by a schedule called "Baseline", force baseline vars
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $CI_SCHEDULE_NAME =~ /Baseline/i'
      variables:
        HEAL_MODE:   "baseline"
        INJECT_FAIL: "true"
    # If triggered by a schedule called "ML", set ml vars
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $CI_SCHEDULE_NAME =~ /ML/i'
      variables:
        HEAL_MODE:   "ml"
        INJECT_FAIL: "true"
    # Otherwise leave defaults
    - when: always

#################### 2. global defaults #######################################
stages: [build, lint, test, post_logs]

variables:
  HEAL_MODE:      "ml"          # default for normal pushes
  INJECT_FAIL:    "false"       # no failure injection by default
  PIP_CACHE_DIR:  "$CI_PROJECT_DIR/.cache/pip"
  PYTHONDONTWRITEBYTECODE: "1"
  PYTHONUNBUFFERED:        "1"

before_script:
  - mkdir -p logs
  - python3 -m pip install --upgrade pip
  - pip install --cache-dir "$PIP_CACHE_DIR" -r requirements.txt

cache:
  key: "$CI_COMMIT_REF_SLUG"
  paths:
    - .cache/pip/

#################### 3. FAST A/B EXPERIMENT JOBS (schedules) ###################
.experiment_template: &experiment
  image: docker:24.0.5  # Use the official Docker image with CLI pre-installed
  stage: build
  services:
    - docker:24.0.5-dind
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
    SKIP_TEST_STAGE: "true"
  before_script:
    - echo "=== EXPERIMENT MODE: $HEAL_MODE (inject=$INJECT_FAIL) ==="
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    - docker pull "$CI_REGISTRY_IMAGE:cache" || true
    - docker build --cache-from "$CI_REGISTRY_IMAGE:cache" -t "$CI_REGISTRY_IMAGE:dev" .
    - docker tag "$CI_REGISTRY_IMAGE:dev" "$CI_REGISTRY_IMAGE:cache"
    - docker push "$CI_REGISTRY_IMAGE:cache"
    - apk add --no-cache python3 py3-pip  # Add Python for predict_and_heal
    - pip install -r requirements.txt
    - python ci/predict_and_heal.py "flake8 ." --tag lint
  artifacts:
    when: always
    paths:
      - logs/ci_logs.csv
  only:
    - schedules

baseline_experiment:
  <<: *experiment
  # HEAL_MODE / INJECT_FAIL are set automatically from workflow rules
  # Schedule description must be "Baseline"

ml_experiment:
  <<: *experiment
  # Schedule description must be "ML"

#################### 4. FULL PIPELINE FOR MAIN PUSHES ##########################
build-image:
  stage: build
  image: python:3.10-slim
  services: [docker:dind]
  variables:
    DOCKER_TLS_CERTDIR: ""
  script:
    - apt-get update && apt-get install -y docker.io
    - python ci/predict_and_heal.py "docker login -u \"$CI_REGISTRY_USER\" -p \"$CI_REGISTRY_PASSWORD\" \"$CI_REGISTRY\"" --tag build
    - python ci/predict_and_heal.py "docker build -t $CI_REGISTRY_IMAGE:dev ." --tag build
    - python ci/predict_and_heal.py "docker push $CI_REGISTRY_IMAGE:dev" --tag build
  artifacts:
    when: always
    paths: [logs/ci_logs.csv]
  only: [main]

lint:
  stage: lint
  image: "$CI_REGISTRY_IMAGE:dev"
  script:
    - python ci/predict_and_heal.py "flake8 ." --tag lint
  artifacts:
    when: always
    paths: [logs/ci_logs.csv]
  only: [main]

test:
  stage: test
  image: "$CI_REGISTRY_IMAGE:dev"
  script:
    - python ci/predict_and_heal.py "python manage.py collectstatic --noinput" --tag test
    - python ci/predict_and_heal.py "python manage.py migrate --noinput" --tag test
    - python ci/predict_and_heal.py "coverage run --source=. manage.py test --parallel --exclude-tag=functional" --tag test
    - python manage.py runserver 0.0.0.0:8000 & sleep 5
    - python ci/predict_and_heal.py "coverage run --append --source=. manage.py test --tag=functional" --tag test
    - coverage report
  artifacts:
    when: always
    paths: [htmlcov/, functional_tests/screenshots/, logs/ci_logs.csv]
  only: [main]

#################### 5. LOG MERGE / PUSH BACK ##################################
update-logs:
  stage: post_logs
  image: python:3.10-slim
  needs: [build-image, lint, test]
  when: always
  before_script: pip install pandas requests
  script: |
    mkdir -p data/raw
    cp logs/ci_logs.csv data/raw/$CI_PIPELINE_ID.csv
    python scripts/merge_incremental.py
    python scripts/push_to_github.py
  only: [main]

collect-logs:
  stage: post_logs
  image: python:3.10-slim
  when: manual
  before_script: pip install pandas requests
  script: |
    python scripts/download_logs.py
    python scripts/merge_full.py
    python scripts/push_to_github.py
  only: [schedules]
